import bcrypt
import json
from database import Database
import mysql.connector
import os 
import datetime
import jwt
from flask import request
from utils.auth import token_required, generate_token
from flask import jsonify
import datetime

class chibo_model:
    def __init__(self):
        db = Database()
        self.con, self.cur = db.get_connection()

    @token_required
    def chibo_update_model(self, MaChiBo, request):
        print("MaChiBo:", MaChiBo)

        data = request.get_json()
        print("D·ªØ li·ªáu JSON nh·∫≠n ƒë∆∞·ª£c:", data)

        user_role = request.vaitro
        if user_role != 1:
            return jsonify({"status": "error", "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t d·ªØ li·ªáu."}), 403
        
        try:
            self.cur = self.con.cursor(dictionary=True)

            # Ki·ªÉm tra ƒë·∫£ng vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
            self.cur.execute("SELECT * FROM quanlydangvien.chibo WHERE MaChiBo = %s", (MaChiBo,))
            existing = self.cur.fetchone()
            if not existing:
                return jsonify({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y ƒë·∫£ng vi√™n"}), 404

            
            # Ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c√≥ trong request
            update_fields = []
            values = []
            for field in data:
                if field in existing:  # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu tr∆∞·ªùng t·ªìn t·∫°i
                    update_fields.append(f"{field} = %s")
                    values.append(data[field])

            if not update_fields:
                return jsonify({"status": "error", "message": "Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ c·∫≠p nh·∫≠t"}), 400

            values.append(MaChiBo)
            sql = f"UPDATE quanlydangvien.chibo SET {', '.join(update_fields)} WHERE MaChiBo = %s"
            self.cur.execute(sql, values)

            self.con.commit()
            return jsonify({"status": "success", "message": "C·∫≠p nh·∫≠t th√†nh c√¥ng"}), 200

        except mysql.connector.Error as err:
            self.con.rollback()
            return jsonify({"status": "error", "message": f"L·ªói c∆° s·ªü d·ªØ li·ªáu: {str(err)}"}), 500

        except Exception as e:
            return jsonify({"status": "error", "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"}), 400

        finally:
            self.cur.close()
        
    @token_required 
    def chibo_delete_model(self, id):
        try:
            self.cur = self.con.cursor(dictionary=True)  # T·∫°o cursor m·ªõi tr√°nh cache

            # üîπ **1. L·∫•y user_id t·ª´ request (middleware ƒë√£ ki·ªÉm tra token)**
            # L·∫•y user_id t·ª´ token
            user_id = request.user_id
            print("User ID t·ª´ token:", user_id)  # Debug xem user_id c√≥ ƒë√∫ng kh√¥ng

            # üîπ **2. Ki·ªÉm tra quy·ªÅn (ch·ªâ admin - vai tr√≤ 1 - m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t)**
            self.cur.execute("SELECT VaiTro FROM nguoidung WHERE MaNguoiDung = %s", (user_id,))
            user = self.cur.fetchone()

            if not user or user["VaiTro"] != 1:
                return json.dumps({"status": "error", "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a chi b·ªô!"}, ensure_ascii=False), 403

            # üîπ **4. Ti·∫øn h√†nh x√≥a user**
            sql = "DELETE FROM quanlydangvien.chibo WHERE MaChiBo = %s"
            self.cur.execute(sql, (id,))

            # Ki·ªÉm tra s·ªë d√≤ng b·ªã ·∫£nh h∆∞·ªüng
            if self.cur.rowcount > 0:
                self.con.commit()  # X√°c nh·∫≠n x√≥a
                return json.dumps({"status": "success", "message": "X√≥a th√†nh c√¥ng!", "deleted_id": id}, ensure_ascii=False), 200
            else:
                return json.dumps({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒë·ªÉ x√≥a.", "deleted_id": id}, ensure_ascii=False), 404

        except mysql.connector.Error as err:
            self.con.rollback()
            return json.dumps({"status": "error", "message": f"L·ªói c∆° s·ªü d·ªØ li·ªáu: {str(err)}"}, ensure_ascii=False), 500

        except Exception as e:
            return json.dumps({"status": "error", "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"}, ensure_ascii=False), 400

        finally:
            self.cur.close()  # ƒê√≥ng cursor

    @token_required
    def chibo_add_model(self, request):
        # L·∫•y vai tr√≤ t·ª´ request
        user_role = request.vaitro
        print("Vai tr√≤ ng∆∞·ªùi d√πng:", user_role)  # Debug

        # Ki·ªÉm tra vai tr√≤ tr∆∞·ªõc khi th·ª±c hi·ªán c·∫≠p nh·∫≠t
        if user_role != 1:  # N·∫øu VaiTro l√† 1 m·ªõi cho ph√©p c·∫≠p nh·∫≠t
            return jsonify({"status": "error", "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m m·ªõi chi b·ªô."}), 403

        try:
            self.cur = self.con.cursor(dictionary=True)
            data = request.get_json()
            if not data:
                return json.dumps({"status": "error", "message": "D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá"}, ensure_ascii=False), 400
            

            sql_chibo = """
            INSERT INTO quanlydangvien.chibo (TenChiBo, TenVietTatChiBo, GhiChuChiBo)
            VALUES (%s, %s, %s)
            """
            values_chibo = (
               data["TenChiBo"], data["TenVietTatChiBo"], data.get("GhiChuChiBo")
            )
            self.cur.execute(sql_chibo, values_chibo)
            self.con.commit()

            response = {
                "status": "success",
                "message": "Chi b·ªô ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
                "chibo": {
                    "TenChiBo": data["TenChiBo"],
                    "TenVietTatChiBo": data["TenVietTatChiBo"],
                    "GhiChuChiBo": data.get("GhiChuChiBo")
                }
            }
            return json.dumps(response, ensure_ascii=False), 201

        except mysql.connector.Error as err:
            self.con.rollback()
            return json.dumps({"status": "error", "message": f"L·ªói c∆° s·ªü d·ªØ li·ªáu: {str(err)}"}, ensure_ascii=False), 500

        except Exception as e:
            return json.dumps({"status": "error", "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"}, ensure_ascii=False), 400

        finally:
            self.cur.close()

    def chibo_getall_model(self):
        try:
            # Ki·ªÉm tra n·∫øu k·∫øt n·ªëi MySQL ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
            if not hasattr(self, 'con') or not self.con.is_connected():
                raise Exception("K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu ƒë√£ b·ªã ƒë√≥ng ho·∫∑c kh√¥ng h·ª£p l·ªá.")

            # S·ª≠ d·ª•ng with statement ƒë·ªÉ t·ª± ƒë·ªông ƒë√≥ng cursor
            with self.con.cursor(dictionary=True) as cur:
                # Truy v·∫•n lo·∫°i b·ªè chi b·ªô c√≥ m√£ l√† 999
                sql = "SELECT * FROM chibo WHERE MaChiBo != 999"
                cur.execute(sql)
                result = cur.fetchall()

                # Tr·∫£ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON
                return jsonify({"status": "success", "data": result}), 200

        except mysql.connector.Error as err:
            # B·∫Øt l·ªói MySQL
            return jsonify({"status": "error", "message": f"L·ªói c∆° s·ªü d·ªØ li·ªáu: {str(err)}"}), 500

        except AttributeError:
            # L·ªói khi self.con ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
            return jsonify({"status": "error", "message": "L·ªói: K·∫øt n·ªëi MySQL ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p."}), 500

        except Exception as e:
            # B·∫Øt l·ªói chung
            return jsonify({"status": "error", "message": f"L·ªói: {str(e)}"}), 500


